import {ReaderTaskEither} from 'fp-ts/lib/ReaderTaskEither';

/**
 * `Req<A>` encodes a resource's request, or rather, an async operation that can fail or return a `Resp<A>`.
 *
 * The request is expressed in terms of `ReaderTaskEither` - a function that takes a `ReqInput` as parameter and returns a `TaskEither` - for better composability: we can act on both side of operation (input and output) with the tools provided by `fp-ts`.
 *
 * @category Request
 * @since 3.0.0
 */
export interface Req<A> extends ReaderTaskEither<ReqInput, Err, Resp<A>> {}

/**
 * `ReqInput` encodes the `fetch()` parameters: a single [`RequestInfo`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters) (simple string or [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request) object) or a tuple of `RequestInfo` and [`RequestInit`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters) (the object containing request's options, that it's optional in the original `fetch()` API).
 *
 * @category Request
 * @since 3.0.0
 */
export type ReqInput = RequestInfo | RequestInfoInit;
/**
 * An alias for a tuple of `RequesInfo` and `RequestInit` (a.k.a. the `fetch()` parameters).
 *
 * @category Request
 * @since 3.0.0
 */
export type RequestInfoInit = [RequestInfo, RequestInit];

/**
 * `Resp<A>` is an object that carries the original `Response` from a `fetch()` call and the actual retrieved `data` (of type `A`).
 *
 * @category Response
 * @since 3.0.0
 */
export interface Resp<A> {
  response: Response;
  data: A;
}

/**
 * `Err` encodes the two kind of error that can be generated by `Req`: a `RequestError` or a `ResponseError`.
 *
 * @category Error
 * @since 3.0.0
 */
export type Err = RequestError | ResponseError;

/**
 * `RequestError` represents a request error. It carries the generated `Error` and the input of the request (`RequestInfoInit` tuple).
 *
 * @category Error
 * @since 3.0.0
 */
export interface RequestError {
  type: 'RequestError';
  error: Error;
  input: RequestInfoInit;
}

/**
 * `ResponseError` represents a response error. It carriess the generated `Error` and the original `Response` object.
 *
 * @category Error
 * @since 3.0.0
 */
export interface ResponseError {
  type: 'ResponseError';
  error: Error;
  response: Response;
}
